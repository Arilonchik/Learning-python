Курс «Основы языка Python» отлично подойдет как для опытных программистов, желающих познакомиться с новым инструментом разработки, так и для совсем начинающих. Мы пройдем путь от основ программирования (переменные, циклы, ветвления) до построения программ с использованием объектно-ориентированного подхода. На протяжении курса мы рассмотрим различные примеры применения языка для решения практических задач. Погрузимся в мир Python и проникнемся его идеологией и философией.

Урок 1. Вступление
Урок 2. Введение в Python
Настройка среды для разработки на Python.
Переменные. Типы данных. Преобразование типов.
Ввод, вывод.
Арифметические и логические операции. Соответствие нескольким условиям: and, or, not.
Условные операторы.
Понятие циклов. Цикл while.
Инструкции break и continue. Инструкция while — else.
Урок 3. Разбор практического задания
Урок 4. Встроенные типы и операции с ними
Строки. Определение. Методы. Форматирование.
Списки. Определение. Методы. Оператор in. Кортежи.
Последовательности. Цикл for in.
Range и когда его применять.
Словари. Определение. Методы. Перебор.
Множества. Методы. Применение.
Урок 5. Разбор практического задания
Урок 6. Практикум. Игра «Угадай число»
Создание простой игры.
Добавление уровня сложности.
Игра для нескольких пользователей.
Урок 7. Разбор практического задания
Урок 8. Функции
Определение. Встроенные функции.
Создание собственных функций.
Аргументы функции.
Области видимости.
Передача функции параметром в другую функцию. Лямбда-функции.
Функции sorted, filter, map.
Урок 9. Разбор практического задания
Урок 10. Модули и библиотеки
Модули. Определение. Применение. Подключение модулей.
Стандартные модули math, random.
Создание собственных модулей.
Пакеты.
Модули os, sys.
Запуск скрипта с параметрами.
Урок 11. Разбор практического задания
Урок 12. Работа с файлами. Кодировки
file.
Строки байт, кодировки.
Запись и чтение байтов.
Pickle.
Json.
Урок 13. Разбор практического задания
Урок 14. Полезные инструменты. Обработка исключений
Тернарный оператор.
Генераторы списков и словарей.
Принципы работы операторов and и or.
Модуль copy.
Обработка исключений.
Урок 15. Разбор практического задания
Урок 16. Практикум. Консольный файловый менеджер
Написание основных функций.
Написание основных функции (продолжение).
Создание основного скрипта.
Урок 17. Разбор практического задания
Введение в Git
Основы работы с Git
В течение 13 роликов мы познакомимся с основами системы контроля версий Git. Выясним, почему она важна в современной разработке и коллективном программировании. Познакомимся с основными понятиями Git: репозиториями, коммитами, ветками и тэгами. Изучим базовые операции: создание и клонирование репозитория, слияние веток, запрос истории изменений и многое другое. Посмотрим, как при помощи Git сдавать домашние задания. Это базовый курс, после него можно приступать к изучению любого языка программирования. Кроме того, вы будете готовы к прохождению собеседования, где несколько вопросов обычно посвящены системе контроля версий.

Урок 1. Введение в системы контроля версий
Что такое система контроля версий?
Виды систем контроля версий
Git и его преимущества
Документация

Урок 2. Работа с командной строкой
Что такое командная строка?
Почему важна командная строка?
Как открыть командную строку?
Полезные команды

Урок 3. Локальная работа с Git-репозиторием
Введение в консольный клиент
Настройка git
Инициализация репозитория
Клонирование репозитория
Графические git-клиенты

Урок 4. Базовые операции
Индексирование
Публикация изменений
Коммиты
Отмена индексирования
Текущий статус

Урок 5. История git-проекта
История изменений
Откат по истории проекта
Авторы изменений: git blame
Игнорирование файлов .gitignore
Сайт gitignore.io
Сохранение папок .keep

Урок 6. Ветки
Управление ветками
Создание и удаление веток
Переключение между ветками
Конфликты способы и их разрешение
git merge

Урок 7. Создание удаленного Git-репозитория
Git-хостинги (GitHub, GitLab, Bitbacket)
Создание собственного bare-git репозитория
Регистрация на GitHub
Публикация изменений в удаленном репозитории

Урок 8. Удаленные ветки
Названия репозиториев
Несколько репозиториев в одном проекте
.git/config
Управление ветками на удаленном репозитории

Урок 9. Версионирование
Способы версионирования
Тэги и их связь с коммитами
Добавление тэга
Удаление тэга
Управление тэга на удаленном репозитории

Урок 10. Слияние и переносы
Сливаем изменения. git merge
Переносим ветки. git rebase
Переносим коммиты. git cherry pick
Сливаем коммит в один. git squash
Хуки
Псевдонимы

Урок 11. Gitflow
Как используется и зачем?
Циклы тестирования
Возможно Blue/green
Релизные ветки
Хотфиксы

Урок 12. SSH
Протокол SSH
Зачем используется?
Создание ключей
Форвардинг
SSH-агент
Копирование файлов по SSH
Windows: Git for Windows
Использование SSH совместно с Git-ом

Урок 13. Сдача домашней работы через Git
Основы языка Python. 1 месяц.
От основ программирования до построения программ с использованием ООП
Язык программирования Python — это мощный инструмент для создания программ самого разнообразного назначения, доступный даже для новичков. С его помощью можно решать задачи различных типов. Курс “Python Basic” отлично подойдет как для опытных программистов, желающих познакомиться с новым инструментом разработки, так и для совсем начинающих. Мы пройдем путь от основ программирования(переменные, циклы, ветвления), до построения программ с использованием объектно ориентированного подхода. На протяжении курса мы рассмотрим различные примеры применения языка для решения практических задач. Погрузимся в мир python и проникнемся его идеологией и философией.

Урок 1. Знакомство с Python
Пришло время познакомиться с важнейшей парадигмой программирования — объектно-ориентированным программированием, которое играет важную роль в Python и позволяет формировать структуру программы из обособленных компонентов. Важные понятия парадигмы — класс, конструктор, атрибут, метод, экземпляр класса. Также в рамках в урока разбираются важнейшие свойства ООП: инкапсуляция, наследование и полиморфизм. Приведено описание механизмов перегрузки и переопределения методов.

Урок 2. Встроенные типы и операции с ними
В данном уроке приведено описание ключевых встроенных типов данных, реализованных в Python. Разработчик может выполнять операции с данными традиционных типов, таких как строки, числа, логический тип. Рассматриваются списки, множества, кортежи, словари. Также в рамках данного урока мы познакомимся с понятиями тернарного оператора и оператора is. Обязательно коснемся и некоторых операций, выполняемых с данными базовых типов, узнаем о трюках, которые может использовать разработчик для повышения лаконичности кода.

Урок 3. Функции
Пришло время познакомиться с механизмом группировки строк кода по блокам — функциям. Они обеспечивают возможность использования этих блоков кода повторно в любой точке программы. Функции могут быть именными и анонимными, принимать параметры и возвращать результат. Важное понятие урока — область видимости переменных. Функции могут документироваться для описания их назначения, принимаемых параметров и возвращаемого результата. Наконец, функции могут быть встроенными и пользовательскими (самописными).

Урок 4. Полезные инструменты
Данный урок посвящен инструментам, которые позволят сделать ваш код более лаконичным, упростить решение многих стандартных задач. В уроке также описаны возможности ряда дополнительных модулей, используемых при написании алгоритмов. Приведены особенности механизма запуска скриптов с параметрами и получения доступа к параметрам из кода программы. Использование представленных инструментов относится к более продвинутому стилю программирования и повышает статус разработчика.

.

Урок 5. Работа с файлами
В текущем уроке рассматриваются аспекты работы с файлами для извлечения данных и записи результатов работы программы. Рассматриваются механизмы чтения и записи данных, режимы работы с файлами. Рассматривается такое важное понятие, как менеджер контекста, описываются частые ошибки при работе с файлами. Приведены особенности определения позиции указателя в файле, возможные параметры файловых объектов, особенности реализации печати в файл.

Урок 6. Объектно-ориентированное программирование
Пришло время познакомиться с важнейшей парадигмой программирования — объектно-ориентированным программированием, которое играет важную роль в Python и позволяет формировать структуру программы из обособленных компонентов. Важные понятия парадигмы — класс, конструктор, атрибут, метод, экземпляр класса. Также в рамках в урока разбираются важнейшие свойства ООП: инкапсуляция, наследование и полиморфизм. Приведено описание механизмов перегрузки и переопределения методов.

Урок 7. ООП. Продвинутый уровень
На этом уроке разберем особенности реализации перегрузки операторов, т. е., изменения механизма работы операторов языка посредством специальных методов. Также в рамках текущего задания мы познакомимся с понятием переопределения метода, т. е., научимся модифицировать логику методов базовых классов. Мы познакомимся с понятием интерфейса и научимся создавать собственные объекты-итераторы. В конце урока мы узнаем, для чего используется декоратор @property и важнейшие особенности воплощения парадигмы ООП в Python.

Урок 8. ООП. Полезные дополнения
Восьмой урок курса посвящен важным дополнениям, расширяющим возможности парадигмы ООП в Python, например о статических методах и методах класса. Кроме того, мы поговорим о встроенных атрибутах и методах, присущих классам. В данном уроке мы также рассмотрим пошаговый процесс написания несложной программы на основе парадигмы ООП и научимся создавать собственные исключения. В завершение урока мы поговорим о некоторых трюках, которые позволят сделать ваш код более лаконичным, и изучим ряд полезных библиотек.

Базы данных. 1 месяц.
Быстрый старт
Урок 1. Вебинар. Установка окружения. DDL - команды
Урок 2. Видеоурок. Управление БД. Язык запросов SQL
Урок 3. Вебинар. Введение в проектирование БД
Урок 4. Вебинар. CRUD-операции
Урок 5. Видеоурок. Операторы, фильтрация, сортировка и ограничение. Агрегация данных
Урок 6. Вебинар. Операторы, фильтрация, сортировка и ограничение. Агрегация данных
Урок 7. Видеоурок. Сложные запросы
Урок 8. Вебинар. Сложные запросы
Урок 9. Видеоурок. Транзакции, переменные, представления. Администрирование. Хранимые процедуры и функции, триггеры
Урок 10. Вебинар. Транзакции, переменные, представления. Администрирование. Хранимые процедуры и функции, триггеры
Урок 11. Видеоурок. Оптимизация запросов. NoSQL
Урок 12. Вебинар. Оптимизация запросов
Алгоритмы и структуры данных на Python. Базовый курс. 1 месяц.
Эффективные решения вычислительных задач
Студенты углубят базу программирования на языке Python и «прокачают» алгоритмическое мышление. Курс учит понимать фундаментальные алгоритмы и использовать их для решения практических задач. Знакомит с методами анализа данных на Python и всеми необходимыми библиотеками.

Урок 1. Введение в алгоритмизацию и реализация простых алгоритмов на Python
Введение в алгоритмизацию. Решение практических задач.

Урок 2. Циклы. Рекурсия. Функции.
Циклы – многократное повторение однотипных действий. Рекурсивный перебор. Алгоритм Евклида. Решето Эратосфена – алгоритм определения простых чисел. Использование функций.

Урок 3. Массивы. Кортежи. Множества. Списки.
Понятие массива, кортежа, множества и списков. Обработка последовательностей, одномерных и двумерных массивов. Работа с ассоциативными массивами (таблицами данных). Двоичный (бинарный) поиск элемента в массиве.

Урок 4. Эмпирическая оценка алгоритмов на Python
Измерения времени работы с использованием timeit. Профайлер.

Урок 5. Коллекции. Список. Очередь. Словарь.
Понятие коллекции. Основные типы коллекции. Стандартные методы работы с коллекциями. Примеры применения коллекций для решения практических задач.

Урок 6. Работа с динамической памятью
Представление в памяти коллекций. Управление памятью.

Урок 7. Алгоритмы сортировки
Сортировка пузырьком. Быстрая сортировка (Quick sort). Сортировка Шелла. Сортировка сложных структур с использованием ключа. Обратная сортировка. Сортировка с использованием функции attrgetter.

Урок 8. Деревья. Хэш-функция
Двоичные деревья поиска. Проход по дереву. Хэш-функция.

HTML/CSS. Интерактивный курс. 1 месяц.
Основы создания сайтов
HTML/CSS - язык гипертекстовой разметки, основа для изучения серверных ЯП. Изучив HTML, вы сможете создать статичную веб-страничку или веб-сайт. CSS - каскадные таблицы стилей - позволит оформить сверстанный сайт так, как вам хочется. Вы сможете смотреть видеокурс в удобное время и по всем вопросам обращаться к наставнику, который будет контролировать ваш прогресс. Формат располагает к общению и самодисциплине в обучении. За месяц вы научитесь: * верстке статических сайтов, * валидной кроссбраузерной вёрстке, * блочной вёрстке, * выполнению базовых операций в Photoshop, * использованию препроцессоров LESS и Bootstrap. Для перехода к следующему занятию курса необходимо, чтобы ваше домашнее задание прошло проверку. Это покажет, что вы поняли предыдущий урок и легко освоите новые знания. Задание может проверить как ментор, так и одногруппники, знаниям которых вы доверяете, и получить за это ачивку. С каждой проверкой количество ачивок растет, а навык работы с чужим кодом увеличивается. От количества ачивок зависит уровень итогового сертификата: чем их больше, тем выше статус. Эта в чем-то игровая механика делает занятия еще интереснее.

Урок 1. Основные понятия в веб-разработке
Что представляет собой веб-страница; виды сайтов; процесс разработки сайта; что такое гипертекст, теги и атрибуты; подготовка рабочего места; структура HTML-документа; основные теги оформления текста; простой пример HTML-странички; пример сложной веб-страницы; горячие клавиши для перемещения по документам.

Урок 2. Основы языка разметки документов HTML
Спецсимволы; комментарии в HTML; гиперссылки; типы изображений для web; загрузка изображений на страницу; списки, формы и их элементы.

Урок 3. Основы языка оформления стилей документа CSS
Что такое CSS; синтаксис CSS; способы объявления CSS; селекторы (id, class, tag); селекторы атрибутов.; основные свойства стилей; вложенность; наследование и группирование свойств; проверка подключения файла стилей.

Урок 4. Псевдоклассы и псевдоэлементы, табличная верстка
Приоритеты применения стилей; псевдоклассы и псевдоэлементы; создание таблиц; объединение ячеек; вложенные таблицы; стилевое оформление таблиц.

Урок 5. Формирование блочной модели, блочная верстка
Основные теги для верстки (div и span); отступы элементов (margin и padding); обтекаемые элементы; позиционирование блоков.

Урок 6. Работа с макетом дизайна в формате PSD
Основные функции и знакомство с Photoshop; выделение основных частей макета; нарезка макета; вёрстка макета сайта при помощи блоков; вставка частей макета в вёрстку;

Урок 7. Разметка сайта и знакомство с Bootstrap
Создание основной разметки сайта; применение overflow и clear в реальной вёрстке; заполнение разметки частями нарезанного макета; приёмы позиционирования элементов; знакомство и применение Bootstrap.

Урок 8. Стандарты web и вспомогательные инструменты
Загрузка проектов на сервер; проблема «кроссбраузерности»; стандарты HTML/CSS; будущее за стандартами HTML5 и CSS3; грамотная, универсальная вёрстка; знакомство с препроцессорами на примере LESS.

Базовый курс JavaScript. 1 месяц.
Интерактивные веб-приложения на ECMASCRIPT 2016
Студенты знакомятся с основами JavaScript, позволяющего делать веб-страницы интерактивными. Учатся создавать динамические страницы и приложения, используя опыт HTML-верстки. Отрабатывают навык программирования на JavaScript, разрабатывая мини-игры.

Урок 1. Основы языка JavaScript
Синтаксис; структура кода; внешние скрипты и порядок их исполнения; переменные и типы данных; Hello world; современные стандарты.

Урок 2. Основные операторы JavaScript
Операторы и операнды; приоритет операций; условные операторы; функции; рекурсия; практикум; игра «Угадай число».

Урок 3. Циклы, массивы, структуры данных
Циклы в JavaScript; массивы в JavaScript; структуры данных; практикум; игра «Быки и коровы».

Урок 4. Объекты в JavaScript
Знакомство с понятием объектов; объекты в JavaScript; работа с объектами; перебор значений; практикум; игра «Квест».

Урок 5. Введение в DOM
Понятие DOM; DOM в JavaScript; манипуляции с DOM в JavaScript; практикум; игра «Квест 2.0».

Урок 6. Обработка событий в JavaScript
Понятие события; обработка нажатий; браузерные события; практикум; игра «Крестики-нолики».

Урок 7. Урок-практикум
Реализация игры «Змейка».

Урок 8. Анонимные функции, замыкания
Углубленное изучение работы функций; функции и функциональные выражения; анонимные функции; замыкания; действия браузера по умолчанию.

Основы Django Framework . 1 месяц.
Создание веб-сайта
На курсе студенты освоят создание веб-сайта на Python с помощью фреймворка Django. В ходе практической разработки начинающие программисты научатся использовать возможности Django, который ускоряет написание кода и позволяет быстро и качественно воплотить идею в рабочий IT-проект. По итогам курса студенты научатся создавать безопасные веб-сайты, внедрять шаблон проектирования MVC, реализовывать авторизацию и регистрацию пользователей, админку и асинхронное обновление контента. Создадут личный проект и портфолио.

Урок 1. Знакомство с фрэймворком
Зачем нужен Django. Сильные стороны фрэймворка. Установка и настройка. Общие сведения о структуре проекта. Знакомство с urlpatterns. Первая страничка и ее отображение.

Урок 2. Шаблон + Контекст = html
Шаблонизатор Django (теги, фильтры и наследование). Работа со статикой и ссылками на страницах. Отправка контента в шаблоны и загрузка его в контроллеры из внешних источников.

Урок 3. Модели + ORM = данные
Краткая теория баз данных. Введение в Django-ORM. Подключение и создание базы данных. Несколько слов о миграциях. Работа с данными. Встроенная админка. Пространства имен.

Урок 4. Аутентификация и регистрация пользователя
Загрузка данных в базу из файлов. Модель пользователя. Процедура аутентификации. Формы в Django. Механизм CRUD при работе с моделями.

Урок 5. Пользователь + товар = корзина
Выполнение запросов при помощи ORM. Работа с меню. Создание корзины.

Урок 6. Корзина + AJAX + декораторы
Работа с корзиной. Добавление динамики в «горячее предложение». Создание страницы продукта. Ограничение доступа к корзине. AJAX: выполнение асинхронных запросов.

Урок 7. Собственная админка
Интеграция нового приложения в проект. Ограничение доступа к админке. Реализация механизма CRUD для пользователей и категорий товаров.

Урок 8. Полезное: страничный вывод, шаблонные фильтры, CBV
Реализация механизма CRUD для товаров. постраничный вывод объектов. CBV: готовые контроллеры. Шаблонные фильтры.

Django Framework. Инструменты оптимизации. 1 месяц.
Разработка сайтов на Python
Продолжая изучать Django, студенты разовьют личный проект: создадут контекстный процессор, добавят подтверждение регистрации пользователя по email. Продолжат знакомство с механизмом Django ORM, решая задачи по агрегации данных, сложным запросам, кешированию, оптимизации работы с БД. Научатся использовать наборы форм (fromsets), чтобы одновременно создавать нескольких экземпляров одной модели например, добавлять несколько записей в категорию на странице в админке. Рассмотрят механизм привязки статических файлов (CSS, JS) к формам в Django. После завершения разработки любой проект должен быть протестирован и развернут на production web-сервере – эти вопросы будут изучены в курсе.

Урок 1. Отправка электронной почты. Контекстные процессоры
Переходим на Django 2.0. Отправляем сообщение с кодом активации пользователя. Работаем с контекстными процессорами на примере корзины.

Урок 2. Регистрация через социальную сеть. Django-ORM: связь один-к-одному
Регистрируемся в магазине через ВКонтакте. Создаем профиль пользователя и заполняем его данными из социальной сети.

Урок 3. Работа с заказом пользователя: CBV, Django formsets
Создаем приложение ordersapp. Работаем с наборами форм Django formsets, используя CBV.

Урок 4. Работа с заказом пользователя: обновляем остатки товара, добавляем код jQuery
Корректируем количество товара при работе с корзиной и заказом. Обновляем статистику заказа при его редактировании. Работаем с набором форм при помощи jQuery и django-dynamic-formset.

Урок 5. Развертывание Django-проекта на сервере
Готовим проект к развертыванию. Переходим на базу данных «PostgreSQL». Имитируем работу с VPS – устанавливаем и настраиваем сервер Ubuntu Server 17. Реализуем связку «nginx»+«gunicorn».

Урок 6. Профилирование и нагрузочное тестирование проекта, оптимизация работы с базой данных
Смотрим на работу проекта изнутри. Находим медленные контроллеры. Проводим нагрузочное тестирование. Оптимизируем работу с базой данных.

Урок 7. Еще быстрее: кеширование в Django
Декоратор «@cached_property»: кешируем методы моделей.
Тег «With» – кешируем переменные в шаблонах.
Кешируем функции, фрагменты шаблона и контроллеры при помощи «Memcached».

Урок 8. Продвинутая работа с Django-ORM. Тестирование в Django
Работа с атрибутами модели на уровне БД. Объекты «F» и «Q». Реализация сложной логики при помощи «Case» и «When». Класс «TestCase» – основа тестов в Django. Smoke-тестирование. Тестирование приложения аутентификации. Тест контроллеров.

Клиент-серверные приложения на Python. 1 месяц.
GeekUniversity
Курс поможет освоить расширенные возможности языка Python – мощного инструмента для создания программ разного профиля. Поэтапно рассматривается разработка приложения, обеспечивающего управление информацией от проектирования до тестирования. Отрабатывать написание многопоточной программы, создание графического интерфейса и управление безопасностью приложения студенты будут, разрабатывая собственный мессенджер.

Урок 1. Концепции хранения информации
Особенности хранения символов в памяти компьютера. Недостатки кодировки ASCII. Введение в кодировку Unicode. Unicode в Python 3. Конвертация байтов и строк — понятие и примеры. Ошибки преобразования.

Урок 2. Файловое хранение данных
Введение в файловое хранение данных. Использование файлов в формате CSV при сохранении данных. Файлы JSON как средство обмена данными. Работа с YAML-файлами при обработке и сохранении данных.

Урок 3. Основы сетевого программирования
Введение в сетевое взаимодействие, его протоколы. Сокеты как основа работы сетевых приложений. Протоколы обмена в курсовом проекте.

Урок 4. Основы тестирования
Введение в тестирование. Оператор assert. Модульное тестирование и модуль unittest.

Урок 5. Логирование
Журналирование событий и модуль logging.

Урок 6. Декораторы и продолжение работы с сетью
Декоратор. Декоратор с параметром. Сетевое программирование (продолжение).

Урок 7. Модуль select, слоты
Особенности использования модуля select. Слоты, их назначение и применение.

Урок 8. Потоки
Введение в потоки. Введение в многопоточное программирование. Модуль threading. Примитивы синхронизации. Модуль Queue. Модуль multiprocessing.

Стажировка в GeekBrains. 2 месяца.
В формате вебинаров
Во время стажировки студентам предстоит поработать в режиме удаленной занятости над Open Source-проектом либо стартапом. Студентам будет предложено выбрать один из набора доступных для разработки проектов. Студенты научатся работать в команде, коммуницировать с другими разработчиками, product- и project-менеджерами, дизайнерами, изучат гибкие методологии, фреймворк SCRUM, освоят принципы дистанционной работы. Результат стажировки — умение работать в команде, пополнение портфолио, возможность указать работу над проектом в качестве профильного опыта работы в резюме. Стажировка проходит в формате дистанционной работы с частичной занятостью, еженедельными встречами-статусами с преподавателем в формате вебинара.

Урок 1. Знакомство, выбор проекта
Какие роли бывают в разработке. Product Manager, Project Manager, разработчик, дизайнер. Что такое MVP. Архитектура современного сервиса. Как разработчики взаимодействуют между собой. REST API, Web Socket. Backend, Frontend, мобильные приложения. Микросервисная архитектура. Основы удаленной работы. Запись в команды.

Урок 2. Методологии разработки
Обзор методологий. Каскад (водопад), Agile-манифест, Канбан, Скрам. Где и для чего применяются. Смешанные методологии.

Урок 3. Методология SCRUM
Работа по SCRUM. Планирование спринта. Причесывание бэклога (backlog grooming). Цель спринта. Инкремент. Гибкая методология в условиях дистанционной работы. Таск-трекеры (Trello, Favro)/

Урок 4. User Story Mapping
Типы задач. Декомпозиция задач. Построение карты пользовательских историй. Работа над пользовательскими историями. Работа с ТЗ по водопаду и в гибких методологиях.

Урок 5. Ответственность, мотивация, личностный рост
Чем и как мотивировать себя. Какие уровни мотивации бывают. Как не сгореть на работе. И как не забить на работу.

Урок 6. Написание резюме
Как написать резюме, чтобы HR его не отсеял. Как заинтересовать работодателя. Как продемонстрировать навыки, полученные в учебе, если профильного опыта работы пока еще нет.

Урок 7. Предварительное подведение итогов, подготовка к защите проекта
Разбор студенческих резюме. Предварительное подведение итогов. Немного о стартапах, монетизации, инвесторах.

Урок 8. Подведение итогов, демонстрация выпускного проекта
Демонстрация рабочего прототипа студентами. Обсуждение полученных результатов. Обратная связь от преподавателя. Напутствие.

Как стать программистом. 13 уроков.
Пошаговая инструкция по поиску работы
Карьера в сфере программирования - это увлекательное путешествие в мир современных технологий. У каждого разработчика своя история и свой опыт. Однако существует базовый алгоритм, который поможет правильно сделать первые шаги и приведёт к вашей цели. Мы подготовили 13 видео-уроков, в которых ответили на самые актуальные вопросы о карьере программиста в компаниях и на рынке фриланса. Часто думаете о трудоустройстве и чувствуете, что готовы начать зарабатывать? Тогда этот видео-курс для вас.

Урок 1. Профессия “Программист”
Особенности профессии; часто задаваемые вопросы; востребованность на рынке труда.

Урок 2. Профориентация
Стану ли я успешным программистом? Факторы успеха.

Урок 3. Начинаем составлять резюме
Самое важное - первое впечатление; как назвать должность.

Урок 4. Выбор языка программирования: веб-разработка
Обзор языков для разработки сайтов: HTML, CSS, JavaScript, PHP, Python, Ruby, C#, Java; правильный выбор.

Урок 5. Мобильная разработка. Универсальные языки программирования
Обзор языков: Java, Objective-C, Swift; C#, C++, Python: правильный выбор.

Урок 6. Правила эффективного резюме
Список технологий; портфолио; дипломы и сертификаты; личностные качества. Взгляд технического специалиста и HR.

Урок 7. Поиск работы: что, где, когда
Работа мечты, психологические аспекты; техника запроса.

Урок 8. Собеседование и испытательный срок
Собеседования для программистов: как себя вести, что говорить, к чему прислушиваться; испытательный срок и правила его прохождения.

Урок 9. Фриланс: первые шаги
Обзор площадок для фриланса; особенности регистрации; оформление аккаунта; как выделяться среди большинства исполнителей.

Урок 10. Фриланс: начало работы и поиск заказов
Стратегия поиска заказов; приоритет заказов: что брать в работу; ведение переговоров; задания и подводные камни ТЗ; методы обращения к клиенту; написание ответов и привлечение внимания клиентов; правильные вопросы.

Урок 11. Фриланс: выполнение заказа и оплата
Способы оплаты: безналичный или наличный расчёт; предоплата или постоплата; обзор ситуаций, в которых лучше сработает каждый из способов; подготовка к работе и обязательные договорённости с клиентом; особенности процесса работы; завершающие этапы сотрудничества; обмен отзывами; техника "посоветоваться".

Урок 12. Специальности в сфере IT
Как проходит разработка в крупных компаниях? Кто такие аналитики, дизайнеры, тестировщики, архитекторы, projectmanager-ы, team-lead-ы и пр.

Урок 13. Карьерная лестница в сфере IT
Как выглядит карьерная лестница в сфере IT? В каких специальностях проще начинать свой путь? Какие есть перспективы развития?

Английский для IT-специалистов. 10 уроков.
Видео-курс
Курс, разработанный совместно с школой EnglishDom, поможет освоить ключевые англоязычные темы, актуальные для начинающих IT-специалистов. Максимум практики и фокус на IT-лексику. На 10 уроках разбирается составление CV, технических заданий и деловых писем, собеседования и переговоры, международное общение при продвижении своего проекта. В живых диалогах на английском студенты закрепят фразы, которые пригодятся в работе разработчикам и тестировщикам, маркетологам и дизайнерам.

Урок 1. IT resume sample
Составляем резюме на английском.

Урок 2. Job interview: questions and answers
Проходим собеседование на английском.

Урок 3. Effective teams
Говорим о командной работе и процессах на английском.

Урок 4. Workplace communication
Английский для общения по телефону и Skype.

Урок 5. Business e-mails
Ведем переписку на английском.

Урок 6. Requirement specifications (SRS)
Читаем и составляем техническое задание на английском.

Урок 7. Stand-up meetings
Становимся идеальным спикером.

Урок 8. Deadline
Выполняем работу в срок и по-английски.

Урок 9. Challenge
Описываем и решаем проблемы по-английски.

Урок 10. Start up
Рассказываем о своем проекте и представляем команду на английском.